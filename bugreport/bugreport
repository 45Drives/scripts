#!/usr/bin/env python3
import os
import sys
import subprocess
import re
import json
import shlex

def check_root():
    root_test =	subprocess.run(["ls","/root"],stdout=subprocess.DEVNULL,stderr=subprocess.DEVNULL).returncode
    if root_test:
        print("bugreport must be run with root privileges")
        sys.exit(root_test)

def get_vdevid_content():
    vdev_id = {}
    if os.path.isfile("/etc/vdev_id.conf"):
        with open("/etc/vdev_id.conf") as conf:
            lines = conf.read().splitlines()

        for line in lines:
            regex = re.search("^alias\s+(\S+)\s+(\S+)$",line)
            if regex != None:
                vdev_id[regex.group(1)] = regex.group(2)
    return vdev_id.copy()
            

def get_devices():
    device_path = "/dev/disk/by-path/"
    devices = os.listdir(device_path)
    return [device_path + s for s in devices]

def get_smartctl_info_using_alias(vdev_id,dev_disk):
    smart_ctl = {}
    for disk in vdev_id:
        if vdev_id[disk] in dev_disk:
            # disk is present in system
            try:
                child = subprocess.Popen(["smartctl", "-a", vdev_id[disk], "--json"],
                stdout=subprocess.PIPE, universal_newlines=True)
            except OSError:
                print("Error executing smartctl. Is it installed?")
                exit(1)

            try:
                outs, errs = child.communicate(timeout=30)
            except subprocess.TimeoutExpired:
                child.kill()
                outs, errs = child.communicate()
            try:
                smart_ctl[disk] = {
                    "output": json.loads("{}" if outs is None else str(outs)),
                    "errors": json.loads("{}" if errs is None else str(errs))
                }
            except:
                print("Error encountered when running smartctl on disk {d}".format(d=disk))

    return smart_ctl.copy()

def get_ipmitool_fru():
    try:
        ipmitool_result = subprocess.Popen(
            ["ipmitool","fru"],stdout=subprocess.PIPE,universal_newlines=True)
    except:
        print("Error executing \"ipmitool fru\"")
        exit(1)	

    ipmitool_fru_output = []
    for line in ipmitool_result.stdout:
        ipmitool_fru_output.append(line)
    return ipmitool_fru_output

def get_server_info_content():
    json_path = "/etc/45drives/server_info/server_info.json"
    json_str = ""
    if os.path.exists(json_path):
        with open(json_path,"r") as f:
            json_str = f.read()
    return json.loads(json_str)

def get_std_out(command):
    try:
        command_result = subprocess.Popen(
            shlex.split(command),stdout=subprocess.PIPE,universal_newlines=True)
    except:
        print(f"Error executing \"{command}\"")
        return [f"Error executing \"{command}\""]

    output_list = []
    for line in command_result.stdout:
        output_list.append(line)
    return output_list

def get_zfs_info():
    zfs_info = {
        "zfs_installed":False
    }
    try:
        command_result = subprocess.run(
            ["command -v zfs"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, shell=True).returncode
    except:
        zfs_info["zfs_installed"] = False
        return zfs_info
    zfs_info["zfs_installed"] = (command_result == 0)

    if not zfs_info["zfs_installed"]:
        return zfs_info

    zfs_info["zfs_list"] = get_std_out("zfs list")
    zfs_info["zpool_list"] = get_std_out("zpool list")
    zfs_info["zpool_status"] = get_std_out("zpool status")
    zfs_info["zpool_iostat"] = get_std_out("zpool iostat -v")
    return zfs_info


def main():
    print("Gathering information for a bug report..")
    check_root()
    
    report = {
        "vdev_id.conf":{},
        "/dev/disk/by-path/":{}
    }
    report["vdev_id.conf"] = get_vdevid_content()
    report["/dev/disk/by-path/"] = get_devices()
    report["smart_ctl"] = get_smartctl_info_using_alias(report["vdev_id.conf"],report["/dev/disk/by-path/"])
    report["ipmitool_fru"] = get_ipmitool_fru()
    report["server_info.json"] = get_server_info_content()
    report["zfs"] = get_zfs_info()

    report_file_name = "bugreport.json"
    if "Serial" in report["server_info.json"].keys():
        report_file_name = "bugreport_{r}.json".format(r=report["server_info.json"]["Serial"])
    with open(report_file_name, 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=4)
    
    print(f"Bug report saved as '{report_file_name}'.")


if __name__ == "__main__":
    main()